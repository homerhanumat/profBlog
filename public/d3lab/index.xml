<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>D3labs on Data and Computing</title>
    <link>/d3lab/</link>
    <description>Recent content in D3labs on Data and Computing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
        <atom:link href="/d3lab/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Very Basic Histogram</title>
      <link>/d3lab/basic-histogram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/d3lab/basic-histogram/</guid>
      <description>&lt;div id=&#34;fastest-speeds&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fastest Speeds&lt;/h2&gt;
&lt;p&gt;Fastest speed ever driven (mph), for 71 students at Georgetown College. &lt;label for=&#34;tufte-mn-&#34; class=&#34;margin-toggle&#34;&gt;⊕&lt;/label&gt;&lt;input type=&#34;checkbox&#34; id=&#34;tufte-mn-&#34; class=&#34;margin-toggle&#34;&gt;&lt;span class=&#34;marginnote&#34;&gt;Source: &lt;code&gt;tigerstats::m111survey&lt;/code&gt;.&lt;/span&gt; The approach to responsivity is to use the svg &lt;code&gt;viewBox&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: For a responsive full-width element, wrap the svg as follows:&lt;/p&gt;
&lt;pre class=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;viz&amp;quot; class=&amp;quot;fullwidth&amp;quot;&amp;gt;&amp;lt;svg id= ...&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;style&gt;
      .tick &gt; line {
        stroke: #EBD8C1;
        fill: none;
      }

      text {
        fill: #C4B9AC;
      }

      path.domain {
        stroke: #000;
        fill: none;
      }
    &lt;/style&gt;
&lt;p id=&#34;viz&#34; class=&#34;fullwidth&#34;&gt;
&lt;svg id=&#34;graph&#34; data-width=&#34;600px&#34; data-height=&#34;450px&#34;&gt;
&lt;/svg&gt;
&lt;/p&gt;
&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/d3/4.9.1/d3.min.js&#34;&gt;&lt;/script&gt;
&lt;script&gt;
  // modified just a bit from:
  // https://gist.github.com/soykje/ec2fc326830355104c89cd50bf1fa192

function responsivefy(svg) {
  // get container + svg aspect ratio
  var container = d3.select(svg.node().parentNode),
      width = parseInt(svg.attr(&#34;data-width&#34;)),
      height = parseInt(svg.attr(&#34;data-height&#34;)),
      aspect = width / height;

  // add viewBox and preserveAspectRatio properties,
  // and call resize so that svg resizes on inital page load
  svg.attr(&#34;viewBox&#34;, &#34;0 0 &#34; + width + &#34; &#34; + height)
      .attr(&#34;preserveAspectRatio&#34;, &#34;xMinYMid&#34;)
      .call(resize);

  // to register multiple listeners for same event type,
  // you need to add namespace, i.e., &#39;click.foo&#39;
  // necessary if you call invoke this function for multiple svgs
  // api docs: https://github.com/mbostock/d3/wiki/Selections#on
  d3.select(window).on(&#34;resize.&#34; + container.attr(&#34;id&#34;), resize);

  // get width of container and resize svg to fit it
  function resize() {
  console.log(container);
      var targetWidth = parseInt(container.style(&#34;width&#34;));
      svg.attr(&#34;width&#34;, targetWidth);
      svg.attr(&#34;height&#34;, Math.round(targetWidth / aspect));
  }
}
&lt;/script&gt;
&lt;script&gt;

      responsivefy(d3.select(&#34;#graph&#34;));
      
      d3.csv(&#34;../../data/m111survey.csv&#34;, data =&gt; histogram(data) );
      
      function histogram(data) {
        var xScale = d3.scaleLinear().domain([ 0, 200 ]).range([ 0, 500 ]);
        var yScale = d3.scaleLinear().domain([ 0, 30 ]).range([ 400, 0 ]);
        var xAxis = d3.axisBottom().scale(xScale)
          .tickValues(d3.range(20, 201, 20));
        var yAxis = d3.axisRight().scale(yScale).tickValues([5, 10, 15, 20, 25]).tickSize(-550);
        
        var speeds = data.map(function(d) { return d[&#34;fastest&#34;]; });
        var histoChart = d3.histogram();
        
        histoChart
          .domain([ 0, 200 ])
          //.thresholds([ 0, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200 ])
          .thresholds(d3.thresholdSturges(speeds))
          .value(d =&gt; Number.parseFloat(d.fastest));
        
        histoData = histoChart(data);
        
        d3.select(&#34;#graph&#34;)
          .selectAll(&#34;rect&#34;)
          .data(histoData).enter()
          .append(&#34;rect&#34;)
            .attr(&#34;x&#34;, d =&gt; xScale(d.x0))
            .attr(&#34;y&#34;, d =&gt; yScale(d.length))
            .attr(&#34;width&#34;, d =&gt; xScale(d.x1 - d.x0) - 2)
            .attr(&#34;height&#34;, d =&gt; 400 - yScale(d.length))
            .style(&#34;fill&#34;, &#34;#FCD88B&#34;)
            .style(&#34;opacity&#34;, 0.80);
        
        d3.select(&#34;#graph&#34;).append(&#34;g&#34;).attr(&#34;id&#34;, &#34;xAxis&#34;)
            .attr(&#34;transform&#34;, &#34;translate(0,400)&#34;).call(xAxis);
            
        d3.select(&#34;#graph&#34;).append(&#34;g&#34;).attr(&#34;id&#34;, &#34;yAxis&#34;)
            .attr(&#34;transform&#34;, &#34;translate(550, 0)&#34;).call(yAxis);
        
        d3.select(&#34;#xAxis&#34;).selectAll(&#34;text&#34;).attr(&#34;dx&#34;, 0);
        d3.select(&#34;#yAxis&#34;).selectAll(&#34;text&#34;).attr(&#34;dy&#34;, 0);
        
        d3.select(&#34;#graph&#34;)
          .append(&#34;line&#34;)
            .attr(&#34;x1&#34;, 0)
            .attr(&#34;y1&#34;, 0)
            .attr(&#34;x2&#34;, 0)
            .attr(&#34;y2&#34;, 400)
            .style(&#34;stroke&#34;, &#34;#000&#34;)
            .style(&#34;stroke-width&#34;, &#34;2px&#34;);
      }
&lt;/script&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A Basic Boxplot</title>
      <link>/d3lab/basic-boxplot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/d3lab/basic-boxplot/</guid>
      <description>&lt;div id=&#34;speed-by-seat&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Speed by Seat&lt;/h2&gt;
&lt;p&gt;Fastest speed ever driven (mph), by seating preference, for 71 students at Georgetown College. &lt;label for=&#34;tufte-mn-&#34; class=&#34;margin-toggle&#34;&gt;⊕&lt;/label&gt;&lt;input type=&#34;checkbox&#34; id=&#34;tufte-mn-&#34; class=&#34;margin-toggle&#34;&gt;&lt;span class=&#34;marginnote&#34;&gt;Data source: &lt;code&gt;tigerstats::m111survey&lt;/code&gt;. Plot code based on &lt;a href=&#34;https://bl.ocks.org/mbostock/4061502&#34;&gt;this block&lt;/a&gt; of Mike Bostock.&lt;/span&gt; Again the approach to responsivity is to use the svg &lt;code&gt;viewBox&lt;/code&gt;.&lt;/p&gt;
&lt;style&gt;

.box {
  font: 10px sans-serif;
}

.box line,
.box rect,
.box circle {
  fill: #fff;
  stroke: #000;
  stroke-width: 1.5px;
}

.box .center {
  stroke-dasharray: 3,3;
}

.box .outlier {
  fill: none;
  stroke: #ccc;
}

&lt;/style&gt;
&lt;p id=&#34;viz&#34;&gt;
&lt;/p&gt;
&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/d3/4.9.1/d3.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../js/box.js&#34;&gt;&lt;/script&gt;
&lt;script&gt;
  // modified just a bit from:
  // https://gist.github.com/soykje/ec2fc326830355104c89cd50bf1fa192

function responsivefy(svg) {
  // get container + svg aspect ratio
  var container = d3.select(svg.node().parentNode),
      width = parseInt(svg.attr(&#34;data-width&#34;)),
      height = parseInt(svg.attr(&#34;data-height&#34;)),
      aspect = width / height;

  // add viewBox and preserveAspectRatio properties,
  // and call resize so that svg resizes on inital page load
  svg.attr(&#34;viewBox&#34;, &#34;0 0 &#34; + width + &#34; &#34; + height)
      .attr(&#34;preserveAspectRatio&#34;, &#34;xMinYMid&#34;)
      .call(resize);

  // to register multiple listeners for same event type,
  // you need to add namespace, i.e., &#39;click.foo&#39;
  // necessary if you call invoke this function for multiple svgs
  // api docs: https://github.com/mbostock/d3/wiki/Selections#on
  d3.select(window).on(&#34;resize.&#34; + container.attr(&#34;id&#34;), resize);

  // get width of container and resize svg to fit it
  function resize() {
  console.log(container);
      var targetWidth = parseInt(container.style(&#34;width&#34;));
      svg.attr(&#34;width&#34;, targetWidth);
      svg.attr(&#34;height&#34;, Math.round(targetWidth / aspect));
  }
}
&lt;/script&gt;
&lt;script&gt;

var margin = {top: 10, right: 50, bottom: 20, left: 50},
    width = 120 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var min = Infinity,
    max = -Infinity;

var chart = d3.box()
    .whiskers(iqr(1.5))
    .width(width)
    .height(height);

d3.csv(&#34;../../data/morley.csv&#34;, function(error, csv) {
  if (error) throw error;

  var data = [];

  csv.forEach(function(x) {
    var e = Math.floor(x.Expt - 1),
        r = Math.floor(x.Run - 1),
        s = Math.floor(x.Speed),
        d = data[e];
    if (!d) d = data[e] = [s];
    else d.push(s);
    if (s &gt; max) max = s;
    if (s &lt; min) min = s;
  });

  chart.domain([min, max]);

  var svg = d3.select(&#34;#viz&#34;).selectAll(&#34;svg&#34;)
      .data(data)
    .enter().append(&#34;svg&#34;)
      .attr(&#34;class&#34;, &#34;box&#34;)
      .attr(&#34;width&#34;, width + margin.left + margin.right)
      .attr(&#34;height&#34;, height + margin.bottom + margin.top)
    .append(&#34;g&#34;)
      .attr(&#34;transform&#34;, &#34;translate(&#34; + margin.left + &#34;,&#34; + margin.top + &#34;)&#34;)
      .call(chart);

  setInterval(function() {
    svg.datum(randomize).call(chart.duration(1000));
  }, 2000);
});

function randomize(d) {
  if (!d.randomizer) d.randomizer = randomizer(d);
  return d.map(d.randomizer);
}

function randomizer(d) {
  var k = d3.max(d) * .02;
  return function(d) {
    return Math.max(min, Math.min(max, d + k * (Math.random() - .5)));
  };
}

// Returns a function to compute the interquartile range.
function iqr(k) {
  return function(d, i) {
    var q1 = d.quartiles[0],
        q3 = d.quartiles[2],
        iqr = (q3 - q1) * k,
        i = -1,
        j = d.length;
    while (d[++i] &lt; q1 - iqr);
    while (d[--j] &gt; q3 + iqr);
    return [i, j];
  };
}

&lt;/script&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Exploding Boxplot</title>
      <link>/d3lab/exploding-boxplot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/d3lab/exploding-boxplot/</guid>
      <description>&lt;script src=&#34;../rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../rmarkdown-libs/d3/d3.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../rmarkdown-libs/d3-tip/d3-tip.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;../rmarkdown-libs/bpexplode/bpexplode.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;../rmarkdown-libs/bpexplode/bpexplode.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../rmarkdown-libs/bpexploder-binding/bpexploder.js&#34;&gt;&lt;/script&gt;


&lt;p id=&#34;reference-paragraph&#34;&gt;
&lt;/p&gt;
&lt;div id=&#34;a-simple-widget&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A Simple Widget&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;bpexploder&lt;/code&gt; represents my first foray into HTMLWidgets for R. It makes boxplots that explode upon mouse-click into jittered individual-value plots. You can configure tool-tips for the individual points.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;installation-and-usage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation and Usage&lt;/h2&gt;
&lt;p&gt;Install the package from GitHub:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;quot;homerhanumat/bpexploder&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set-up:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(bpexploder)
set.seed(5437)  # one way to avoid .Random.Seed warning from widgetId creation&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;settings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Settings&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;bpexploder&lt;/code&gt; provides modest options for customization, as illustrated in the following example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bpexploder(data = chickwts,
          settings = list(
            yVar = &amp;quot;weight&amp;quot;,
            # default NULL makes one plot for yVar
            groupVar = &amp;quot;feed&amp;quot;,
            levels = levels(with(chickwts,
                                 reorder(feed, weight, median))),
            # you could adjust the group lables ...
            levelLabels = NULL,
            # ... and the colors for each group:
            levelColors = NULL,
            yAxisLabel = &amp;quot;6-week weight (grams)&amp;quot;,
            xAxisLabel = &amp;quot;type of feed&amp;quot;,
            tipText = list(
              # as many os you like of:
              # variableName = &amp;quot;desired tool-tip label&amp;quot;
              # leave tipText at NULL for no tips
              weight = &amp;quot;weight&amp;quot;),
            referenceId = &amp;quot;reference-paragraph&amp;quot;
            )
          )&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:480px;&#34; class=&#34;bpexploder html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:{&#34;weight&#34;:[179,160,136,227,217,168,108,124,143,140,309,229,181,141,260,203,148,169,213,257,244,271,243,230,248,327,329,250,193,271,316,267,199,171,158,248,423,340,392,339,341,226,320,295,334,322,297,318,325,257,303,315,380,153,263,242,206,344,258,368,390,379,260,404,318,352,359,216,222,283,332],&#34;feed&#34;:[&#34;horsebean&#34;,&#34;horsebean&#34;,&#34;horsebean&#34;,&#34;horsebean&#34;,&#34;horsebean&#34;,&#34;horsebean&#34;,&#34;horsebean&#34;,&#34;horsebean&#34;,&#34;horsebean&#34;,&#34;horsebean&#34;,&#34;linseed&#34;,&#34;linseed&#34;,&#34;linseed&#34;,&#34;linseed&#34;,&#34;linseed&#34;,&#34;linseed&#34;,&#34;linseed&#34;,&#34;linseed&#34;,&#34;linseed&#34;,&#34;linseed&#34;,&#34;linseed&#34;,&#34;linseed&#34;,&#34;soybean&#34;,&#34;soybean&#34;,&#34;soybean&#34;,&#34;soybean&#34;,&#34;soybean&#34;,&#34;soybean&#34;,&#34;soybean&#34;,&#34;soybean&#34;,&#34;soybean&#34;,&#34;soybean&#34;,&#34;soybean&#34;,&#34;soybean&#34;,&#34;soybean&#34;,&#34;soybean&#34;,&#34;sunflower&#34;,&#34;sunflower&#34;,&#34;sunflower&#34;,&#34;sunflower&#34;,&#34;sunflower&#34;,&#34;sunflower&#34;,&#34;sunflower&#34;,&#34;sunflower&#34;,&#34;sunflower&#34;,&#34;sunflower&#34;,&#34;sunflower&#34;,&#34;sunflower&#34;,&#34;meatmeal&#34;,&#34;meatmeal&#34;,&#34;meatmeal&#34;,&#34;meatmeal&#34;,&#34;meatmeal&#34;,&#34;meatmeal&#34;,&#34;meatmeal&#34;,&#34;meatmeal&#34;,&#34;meatmeal&#34;,&#34;meatmeal&#34;,&#34;meatmeal&#34;,&#34;casein&#34;,&#34;casein&#34;,&#34;casein&#34;,&#34;casein&#34;,&#34;casein&#34;,&#34;casein&#34;,&#34;casein&#34;,&#34;casein&#34;,&#34;casein&#34;,&#34;casein&#34;,&#34;casein&#34;,&#34;casein&#34;]},&#34;settings&#34;:{&#34;yVar&#34;:&#34;weight&#34;,&#34;groupVar&#34;:&#34;feed&#34;,&#34;levels&#34;:[&#34;horsebean&#34;,&#34;linseed&#34;,&#34;soybean&#34;,&#34;meatmeal&#34;,&#34;sunflower&#34;,&#34;casein&#34;],&#34;levelLabels&#34;:null,&#34;levelColors&#34;:null,&#34;yAxisLabel&#34;:&#34;6-week weight (grams)&#34;,&#34;xAxisLabel&#34;:&#34;type of feed&#34;,&#34;tipText&#34;:{&#34;weight&#34;:&#34;weight&#34;},&#34;referenceId&#34;:&#34;reference-paragraph&#34;,&#34;align&#34;:&#34;center&#34;,&#34;aspect&#34;:1.25}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;/div&gt;
&lt;div id=&#34;credits&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;p&gt;The Javascript library is based on Mathieu Caule’s &lt;a href=&#34;https://mcaule.github.io/d3_exploding_boxplot/&#34;&gt;D3 Exploding Boxplots&lt;/a&gt;, which I have modified slightly and updated for D3 Version 4. The tool-tips were originally developed by &lt;a href=&#34;https://github.com/Caged&#34;&gt;Justin Palmer&lt;/a&gt; and were updated by &lt;a href=&#34;https://github.com/VACLab/d3-tip&#34;&gt;Dave Gotz&lt;/a&gt;. I modified the tip-function a bit.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Regression to the Mean</title>
      <link>/d3lab/regression-to-mean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/d3lab/regression-to-mean/</guid>
      <description>&lt;div id=&#34;instructional-app&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Instructional App&lt;/h2&gt;
&lt;p&gt;This is a port of one of my earliest Shiny apps.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-app&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The App&lt;/h2&gt;
&lt;style&gt;

    svg {
      padding-bottom: 16px;
    }

    .regression {
      stroke-width: 2px;
      stroke: blue;
    }

    .sdline {
      stroke-width: 2px;
      stroke: red;
      stroke-dasharray: 10, 5;
    }

    .equation {
      font-size: 12px;
      margin-top: 5px;
      text-align: center;
    }

    .axistext {
      font-size: 14px;
    }

    #selector {
      margin-left: 50px;
    }

    .kmeans {
      visibility: hidden;
    }

    .meansPlot {
      visibility: hidden;
    }

    .meanpoint {
      visibility: hidden;
    }

    .kmeans rect {
      opacity: 0.5;
    }

    .meanlevel {
      stroke-width: 3px;
      stroke: darkgreen;
    }
&lt;/style&gt;
&lt;p&gt;
&lt;label for=&#34;rho&#34;&gt;Target Correlation: &lt;/label&gt; &lt;input id=&#34;rho&#34; type=&#34;number&#34; value=&#34;0.5&#34; step=&#34;0.01&#34; min=&#34;0&#34; max=&#34;1&#34;&gt; &lt;select id=&#34;selector&#34;&gt; &lt;option value=&#34;noshow&#34; selected&gt;Do not show y-means&lt;/option&gt; &lt;option value=&#34;rect&#34; selected&gt;Show mean of moving range&lt;/option&gt; &lt;option value=&#34;all&#34;&gt;Show all means&lt;/option&gt; &lt;/select&gt;
&lt;/p&gt;
&lt;p id=&#34;reference&#34;&gt;
&lt;/p&gt;
&lt;p class=&#34;chart&#34;&gt;
&lt;/p&gt;
&lt;div class=&#34;equation&#34;&gt;

&lt;/div&gt;
&lt;div class=&#34;equation&#34;&gt;

&lt;/div&gt;
&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/d3/4.9.1/d3.min.js&#34;&gt;&lt;/script&gt;
&lt;script&gt;
  // modified just a bit from:
  // https://gist.github.com/soykje/ec2fc326830355104c89cd50bf1fa192

function responsivefy(svg) {
  // get container + svg aspect ratio
  var container = d3.select(svg.node().parentNode),
      width = parseInt(svg.attr(&#34;data-width&#34;)),
      height = parseInt(svg.attr(&#34;data-height&#34;)),
      aspect = width / height;

  // add viewBox and preserveAspectRatio properties,
  // and call resize so that svg resizes on inital page load
  svg.attr(&#34;viewBox&#34;, &#34;0 0 &#34; + width + &#34; &#34; + height)
      .attr(&#34;preserveAspectRatio&#34;, &#34;xMinYMid&#34;)
      .call(resize);

  // to register multiple listeners for same event type,
  // you need to add namespace, i.e., &#39;click.foo&#39;
  // necessary if you call invoke this function for multiple svgs
  // api docs: https://github.com/mbostock/d3/wiki/Selections#on
  d3.select(window).on(&#34;resize.&#34; + container.attr(&#34;id&#34;), resize);

  // get width of container and resize svg to fit it
  function resize() {
  console.log(container);
      //var targetWidth = parseInt(container.style(&#34;width&#34;));
      var targetWidth = document.querySelector(&#34;#reference&#34;).offsetWidth;
      svg.attr(&#34;width&#34;, targetWidth);
      svg.attr(&#34;height&#34;, Math.round(targetWidth / aspect));
  }
}
&lt;/script&gt;
&lt;script&gt;
    // started from 
    //:http://blockbuilder.org/uredkar/e87f0cf2925cd5a78ba919bf7a279e1d
    // setup   

    let margin = { top: 33, right: 5, bottom: 20, left: 50 },
      width = 450 - margin.left - margin.right,
      height = 450 - margin.top - margin.bottom;


    document.querySelector(&#34;#selector&#34;)
      .addEventListener(&#34;input&#34;, selectHandler);

    document.querySelector(&#34;#rho&#34;)
      .addEventListener(&#34;input&#34;, rhoHandler);

    document.querySelector(&#34;#rho&#34;).dispatchEvent(new Event(&#39;input&#39;));

    /// FUNCTIONS..................................................

    function rhoHandler(e) {
      let rho = this.value;
      let data = bvn(n = 500, rho = rho);

      document.querySelector(&#34;.chart&#34;).innerHTML = &#34;&#34;;
      document.querySelector(&#34;#selector&#34;).value = &#34;noshow&#34;;

      let svg = d3.select(&#34;.chart&#34;).append(&#34;svg&#34;)
        .attr(&#34;width&#34;, width + margin.left + margin.right)
        .attr(&#34;height&#34;, height + margin.top + margin.bottom)
        .attr(&#34;data-width&#34;, width + margin.left + margin.right)
        .attr(&#34;data-height&#34;, height + margin.top + margin.bottom)
        .append(&#34;g&#34;)
        .attr(&#34;transform&#34;, &#34;translate(&#34; + margin.left + &#34;,&#34; + margin.top + &#34;)&#34;);

      let x = d3.scaleLinear()
        .range([0, width]);

      let y = d3.scaleLinear()
        .range([height, 0]);

      let xAxis = d3.axisBottom()
        .scale(x);

      let yAxis = d3.axisLeft()
        .scale(y);

      // axis title variables     
      let yaxistext = &#34;y&#34;
      let xaxistext = &#34;x&#34;

      // text label for the x axis
      svg.append(&#34;text&#34;)
        .attr(&#34;class&#34;, &#34;axistext&#34;)
        .attr(&#34;transform&#34;,
          &#34;translate(&#34; + (width - margin.left) + &#34; ,&#34; +
          (height + margin.top) + &#34;)&#34;)
        .style(&#34;text-anchor&#34;, &#34;middle&#34;)
        .text(xaxistext);

      // text label for the y axis
      svg.append(&#34;text&#34;)
        .attr(&#34;class&#34;, &#34;axistext&#34;)
        .attr(&#34;transform&#34;, &#34;rotate(-90)&#34;)
        .attr(&#34;y&#34;, 0 - margin.left)
        .attr(&#34;x&#34;, 0 - (height / 2))
        .attr(&#34;dy&#34;, &#34;1em&#34;)
        .style(&#34;text-anchor&#34;, &#34;middle&#34;)
        .text(yaxistext)

      // add basic axes, all points, calculate scales     
      y.domain(d3.extent(data, function (d) { return d.y }));
      x.domain(d3.extent(data, function (d) { return d.x }));
      svg.append(&#34;g&#34;)
        .attr(&#34;class&#34;, &#34;x axis&#34;)
        .attr(&#34;transform&#34;, &#34;translate(0,&#34; + height + &#34;)&#34;)
        .call(xAxis)
      svg.append(&#34;g&#34;)
        .attr(&#34;class&#34;, &#34;y axis&#34;)
        .call(yAxis);
      svg.selectAll(&#34;.point&#34;)
        .data(data)
        .enter().append(&#34;circle&#34;)
        .attr(&#34;class&#34;, &#34;point&#34;)
        .attr(&#34;r&#34;, 2)
        .attr(&#34;cy&#34;, function (d) { return y(d.y); })
        .attr(&#34;cx&#34;, function (d) { return x(d.x); })
        ;

      //  r, slope, regression ans sd lines
      let xSeries = data.map(function (e) { return e.x; });
      let ySeries = data.map(function (e) { return e.y; });
      let {slope, intercept, rSquare, 
        xBar, yBar, sdRatio} = leastSquares(xSeries, ySeries);
      // regression line equation
      document.getElementsByClassName(&#34;equation&#34;)[0]
        .innerHTML = &#34;y = &#34; + round(slope, 2) + &#34;x + &#34; + round(intercept, 2);
      // r
      document.getElementsByClassName(&#34;equation&#34;)[1]
        .innerHTML = &#34;r = &#34; + round(Math.sqrt(rSquare), 2);
      // Add trendline
      let ptAx = d3.min(xSeries);
      let ptAy = slope * d3.min(xSeries) + intercept;
      let ptBx = d3.max(xSeries);
      let ptBy = intercept + slope * d3.max(xSeries);;
      svg.append(&#34;line&#34;)
        .attr(&#34;class&#34;, &#34;regression&#34;)
        .attr(&#34;x1&#34;, x(ptAx))
        .attr(&#34;y1&#34;, y(ptAy))
        .attr(&#34;x2&#34;, x(ptBx))
        .attr(&#34;y2&#34;, y(ptBy))
        ;
      var ptsdAX = d3.min(xSeries);
      var ptsdAY = yBar + sdRatio * (ptsdAX - xBar);
      var ptsdBX = d3.max(xSeries);
      var ptsdBY = yBar + sdRatio * (ptsdBX - xBar);

      svg.append(&#34;line&#34;)
        .attr(&#34;class&#34;, &#34;sdline&#34;)
        .attr(&#34;x1&#34;, x(ptsdAX))
        .attr(&#34;y1&#34;, y(ptsdAY))
        .attr(&#34;x2&#34;, x(ptsdBX))
        .attr(&#34;y2&#34;, y(ptsdBY))
        ;

      svg.append(&#34;g&#34;)
        .attr(&#34;class&#34;, &#34;kmeans&#34;)
        .attr(&#34;transform&#34;, `translate(${x(xBar) - 20}, 0)`)
        ;
      let kmeans = d3.select(&#34;g.kmeans&#34;);
      kmeans.append(&#34;rect&#34;)
        .attr(&#34;x&#34;, 0)
        .attr(&#34;y&#34;, 0)
        .attr(&#34;width&#34;, 40)
        .attr(&#34;height&#34;, height)
        .attr(&#34;fill&#34;, &#34;palegreen&#34;)
        ;
      kmeans.append(&#34;line&#34;)
        .attr(&#34;class&#34;, &#34;meanlevel&#34;)
        .attr(&#34;x1&#34;, 0)
        .attr(&#34;x2&#34;, 40)
        .attr(&#34;y1&#34;, y(yBar))
        .attr(&#34;y2&#34;, y(yBar))
        ;
      kmeans.append(&#34;circle&#34;)
        .attr(&#34;class&#34;, &#34;meanpoint&#34;)
        .attr(&#34;r&#34;, 4)
        .attr(&#34;fill&#34;, &#34;darkgreen&#34;)
        .attr(&#34;cx&#34;, 20)
        .attr(&#34;cy&#34;, y(yBar))
        ;

      const dragHandler = d3.drag().on(&#34;drag&#34;, function () {
        if (d3.event.x &gt;= 0 &amp;&amp; d3.event.x &lt;= width - 40) {
          d3.select(this)
            .attr(&#34;transform&#34;, `translate(${d3.event.x}, 0)`);
          let mean = meanInRange(data, x.invert(d3.event.x),
            x.invert(d3.event.x + 40));
          let line = d3.select(&#34;.meanlevel&#34;);
          let meanPoint = d3.select(&#34;.meanpoint&#34;);
          if (isNaN(mean)) {
            line.style(&#34;visibility&#34;, &#34;hidden&#34;);
            meanPoint.style(&#34;visibility&#34;, &#34;hidden&#34;);
          } else {
            line.attr(&#34;y1&#34;, y(mean)).attr(&#34;y2&#34;, y(mean));
            meanPoint.attr(&#34;cy&#34;, y(mean));
            line.style(&#34;visibility&#34;, &#34;visible&#34;);
            meanPoint.style(&#34;visibility&#34;, &#34;visible&#34;);
          }
        }
        
      });

      dragHandler(kmeans);
      
      // make line graph of kmeans
      let bandWidth = 0.2;
      let step = (d3.max(xSeries) - d3.min(xSeries)) / 200;
      let xvals = d3.range(d3.min(xSeries), d3.max(xSeries), step);
      let pathPoints = [];
      for (let i = 0; i &lt; xvals.length; i++) {
        let mean = meanInRange(data, xvals[i] - bandWidth,
            xvals[i] + bandWidth);
        if (!isNaN(mean)) {
          pathPoints.push({x: xvals[i], y: mean});
        }
      }
      let line = d3.line()
        .x(function(d) { return x(d.x); })
        .y(function(d) { return y(d.y); });
      svg.append(&#34;path&#34;)
      .datum(pathPoints)
      .attr(&#34;class&#34;, &#34;meansPlot&#34;)
      .attr(&#34;fill&#34;, &#34;none&#34;)
      .attr(&#34;stroke&#34;, &#34;darkgray&#34;)
      .attr(&#34;stroke-linejoin&#34;, &#34;round&#34;)
      .attr(&#34;stroke-linecap&#34;, &#34;round&#34;)
      .attr(&#34;stroke-width&#34;, 2.0)
      .attr(&#34;d&#34;, line)
      ;
      
      responsivefy(d3.select(&#34;.chart svg&#34;));

    }

    function gaussian(a, b) {
      return {
        u: Math.sqrt(-2 * Math.log(a)) * Math.cos(2 * Math.PI * b),
        v: Math.sqrt(-2 * Math.log(a)) * Math.sin(2 * Math.PI * b)
      };
    }

    function bvn(n = 200, rho = 0.5, mu1 = 0, sigma1 = 1,
      mu2 = 0, sigma2 = 1) {
      let data = [];
      for (let i = 0; i &lt; n; i++) {
        //generate two independent normals (box-muller)
        let u1 = Math.random();
        let u2 = Math.random();
        let { u, v } = gaussian(u1, u2);
        let x = mu1 + sigma1 * u;
        let sdY = Math.sqrt((1 - Math.pow(rho, 2)) * Math.pow(sigma2, 2));
        let y = mu2 + (sigma2 / sigma1) * rho * (u - mu1) + sdY * v;
        data.push({ x: x, y: y });
      }
      return data;
    }

    function selectHandler(e) {
      let selection = this.value;
      if (selection === &#34;noshow&#34;) {
        d3.select(&#34;.kmeans&#34;).style(&#34;visibility&#34;, &#34;hidden&#34;);
        d3.select(&#34;.meanlevel&#34;).style(&#34;visibility&#34;, &#34;hidden&#34;);
        d3.select(&#34;.meanpoint&#34;).style(&#34;visibility&#34;, &#34;hidden&#34;);
        d3.select(&#34;.meansPlot&#34;).style(&#34;visibility&#34;, &#34;hidden&#34;);
      }
      if (selection === &#34;rect&#34;) {
        d3.select(&#34;.kmeans&#34;).style(&#34;visibility&#34;, &#34;visible&#34;);
        d3.select(&#34;.meanlevel&#34;).style(&#34;visibility&#34;, &#34;visible&#34;);
        d3.select(&#34;.meanpoint&#34;).style(&#34;visibility&#34;, &#34;visible&#34;);
        d3.select(&#34;.meansPlot&#34;).style(&#34;visibility&#34;, &#34;hidden&#34;);
      }
      if (selection === &#34;all&#34;) {
        d3.select(&#34;.kmeans&#34;).style(&#34;visibility&#34;, &#34;hidden&#34;);
        d3.select(&#34;.meanlevel&#34;).style(&#34;visibility&#34;, &#34;hidden&#34;);
        d3.select(&#34;.meanpoint&#34;).style(&#34;visibility&#34;, &#34;hidden&#34;);
        d3.select(&#34;.meansPlot&#34;).style(&#34;visibility&#34;, &#34;visible&#34;);
      }
    }

    function meanInRange(data, a, b) {
      let sum = 0;
      let count = 0;
      for (let i = 0; i &lt; data.length; i++) {
        let x = data[i].x;
        if (x &gt;= a &amp;&amp; x &lt;= b) {
          sum += data[i].y
          count++
        }
      }
      return (sum / count);
    }


    // round decimals   
    function round(value, decimals) {
      return Number(Math.round(value + &#39;e&#39; + decimals) + &#39;e-&#39; + decimals);
    }


    // calculate linear regression
    function leastSquares(xSeries, ySeries) {

      let reduceSumFunc = function (prev, cur) { return prev + cur; }
      let xBar = xSeries.reduce(reduceSumFunc) * 1.0 / xSeries.length;
      let yBar = ySeries.reduce(reduceSumFunc) * 1.0 / ySeries.length;
      let ssXX = xSeries.map(function (d) { return Math.pow(d - xBar, 2); })
        .reduce(reduceSumFunc);

      let ssYY = ySeries.map(function (d) { return Math.pow(d - yBar, 2); })
        .reduce(reduceSumFunc);

      let sdRatio = Math.sqrt(ssYY / ssXX);

      let ssXY = xSeries.map(function (d, i) { return (d - xBar) * (ySeries[i] - yBar); })
        .reduce(reduceSumFunc);

      let slope = ssXY / ssXX;
      let intercept = yBar - (xBar * slope);
      let rSquare = Math.pow(ssXY, 2) / (ssXX * ssYY);

      return {slope, intercept, rSquare, xBar, yBar, sdRatio};
    }


  &lt;/script&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Nick Strayer&#39;s Power Series App</title>
      <link>/d3lab/exponential/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/d3lab/exponential/</guid>
      <description>&lt;div id=&#34;the-app&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The App&lt;/h2&gt;
&lt;p&gt;Let’s see if it works.&lt;/p&gt;
&lt;style&gt;
svg text {
  font-family: garamond;
}
&lt;/style&gt;
&lt;div id=&#34;viz&#34; class=&#34;fullwidth&#34;&gt;

&lt;/div&gt;
&lt;script src=&#34;https://cdn.rawgit.com/gka/d3-jetpack/master/build/d3v4%2Bjetpack.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://d3js.org/d3-scale-chromatic.v1.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://rawgit.com/nstrayer/slid3r/master/dist/slid3r.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../js/expobundle.js&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>